<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
 	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
    <!-- context:上下文
    component-scan:组件扫描
    base-package:根包，只要扫描根包，根包下所有子包中的类都会被扫描
     -->
	<context:component-scan base-package="com.wj.cn">
	    <!-- 下面的标签可写可不写 -->
		<!-- <context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" /> -->
	</context:component-scan>

	<!-- 加载配数据源配置文件 db.properties -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 配置 Druid数据源 -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			
		<!-- 给对象的属性设置值 -->
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="driverClassName" value="${db.driver_class}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="initialSize" value="${db.minPoolSize}"></property>
		<property name="maxActive" value="${db.maxPoolSize}"></property>
	</bean>
	

	<!-- 事务管理器 （JDBC） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 启动声明式事务驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 扫描 pojo 包，使用别名,默认的别名就是类的类名 -->
		<property name="typeAliasesPackage" value="com.wj.cn.pojo"></property>
		<!-- 扫描映射文件 -->
		<property name="mapperLocations" value="classpath:mappers/*.xml"></property>
	<!-- 配置别名包 -->
	<!-- 	
		<property name="typeAliasesPackage" value="cn.tedu.pojo"></property> -->
		
	</bean>

	<!-- 配置扫描 mapper 包，动态实现 mapper 接口，注入到 spring 容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wj.cn.mapper" />
		<!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	

</beans>